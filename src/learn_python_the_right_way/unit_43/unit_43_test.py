import re

######################################################
# 문자열 판단하기
######################################################
# re.match('패턴', '문자열')
######################################################
# 문자열이 있으므로 정규표현식 매치 객체가 반환됨.
re.match('Hello', 'Hello, world!')

# 문자열이 없으므로 아무것도 반환되지 않음.
re.match('Python', 'Hello, world!')

######################################################
# '^문자열' 맨 앞
# '문자열$' 맨 뒤
#  re.search('패턴', '문자열')
######################################################
# 'Hello'로 시작하므로 패턴에 매칭됨(like 'startswith')
re.search('^Hello', 'Hello, world!')

# 'world!'로 끝나므로 패턴에 매칭됨(like 'endswith')
re.search('world!$', 'Hello, world!')

######################################################
# '문자열|문자열|문자열' 하나라도 포함되는지 OR
######################################################
# 'hello' 또는 'world'가 있으므로 패턴에 매칭됨.(or)
re.search('hello|world', 'Hello, world!')

######################################################
# 범위 판단하기
# '[0-9]*' 0개 이상
# '[0-9]+' 1개 이상
######################################################
# '1234'는 0부터 9까지 숫자가 0개 이상 있으므로 패턴 매칭
re.match('[0-9]*', '1234')
# 'abcd'는 0부터 9까지 숫자가 0개 이상 있으므로 패턴 매칭
re.match('[0-9]*', 'abcd')

# 1234는 0부터 9까지 숫자가 1개 이상 있으므로 패턴 매칭
re.match('[0-9]+', '1234')
# 'abcd'는 0부터 9까지 숫자가 1개 이상 없으므로 매칭 안됨
re.match('[0-9]+', 'abcd')

re.match('a*b', 'b')    # O
re.match('a*b', 'aab')  # O
re.match('a+b', 'b')    # X
re.match('a+b', 'aab')  # O

######################################################
# 문자가 한 개만 있는지 판단하기
# '문자?' 0개 또는 1개
# '문자.' 1개
######################################################
re.match('H?', 'H')     # O
re.match('H?', 'Hi')    # O
re.match('H.', 'H')     # X
re.match('H.', 'Hi')    # O

######################################################
# 문자 개수 판단하기
# '문자{개수}'
# '(문자열){개수}'
######################################################
re.match('h{3}', 'hello')       # X
re.match('h{3}', 'hhhello')     # O
re.match('h{3}', 'hhhhello')    # O
re.match('(hello){3}', 'hello world')       # X
re.match('(hello){3}', 'hellohellohello')   # O

# '[0-9]{개수}'
re.match('[0-9]{3}-[0-9]{4}-[0-9]{4}', '010-0000-0000')  # O
re.match('[0-9]{3}-[0-9]{4}-[0-9]{4}', '010-0000-000')   # X

# '(문자){시작개수, 끝개수}'
# '(문자열){시작개수, 끝개수}'
# '[0-9]{시작개수, 끝개수}'
re.match('[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}', '02-000-0000')
re.match('[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}', '032-0000-0000')
re.match('[0-9]{2,3}-[0-9]{3,4}-[0-9]{4}', '032-00-0000')

######################################################
# 숫자와 영문 문자 조합해서 판단하기
# 'a-z'
# 'A-Z'
######################################################
re.match('[a-zA-Z0-9]+', 'Hello1234')
re.match('[a-zA-Z0-9]+', 'Hello')
re.match('[a-zA-Z0-9]+', 'hello')
re.match('[A-Z0-9]+', 'hello')

# 'ㄱ-힣', '가-힣'
re.match('[가-힣]+', '홍길동')
re.match('[가-힣]+', 'ㄱ')
re.match('[ㄱ-힣]+', 'ㄱ')
re.match('[ㄱ-힣]+', 'ㄹㅁ')
re.match('[ㄱ-ㅎ]+', 'ㅏ')
re.match('[ㄱ-힣]+', 'ㅢ')
re.match('[가-힣]+', 'james')

######################################################
# 특정 문자 범위에 포함되지 않는지 판단하기
# [^범위]*
# [^범위]+
# 특정 문자 범위로 시작하는지 판단하기
# ^[범위]*
# ^[범위]+
# 특정 문자 범위로 끝나는지 판단하기
# [범위]*$
# [범위]+$
######################################################
re.match('[^A-Z]+', 'Hello')  # X
re.match('[^A-Z]+', 'hello')  # O
re.match('^[A-Z]+', 'Hello')  # O
re.match('^[A-Z]+', 'hello')  # X
re.match('[0-9]+$', 'hello1234')  # O --> X 확인 필요

######################################################
# \특수문자(정규표현식에 사용하는, *, +, ?, ., ^, $, (, ), [, ], -)
# \d: [0-9]     모든 숫자
# \D: [^0-9]    숫자 제외 모든 문자
# \w: [a-zA-Z0-9_]  영문 대소문자, 숫자, 밑줄 문자
# \W: [^a-zA-Z0-9_] 영문 대소문자, 숫자, 밑줄 문자 제외 모든 문자
######################################################
re.match('\d+', '1234')
re.match('\D+', 'Hello')
re.match('\w+', 'Hello_1234')
re.match('\W+', '(:)^$*+.-[]')

######################################################
# 공백 처리
# \s: [\t\n\r\f\v]      공백, 탭, 새줄|라인피드, 캐리지 리턴, 폼피드, 수직탭
# \S: [^ \t\n\r\f\v]    공백 제외, \t\n\r\f\v
######################################################
re.match('[a-zA-Z0-9]+', 'Hello 1234')
re.match('[a-zA-Z0-9\s]+', 'Hello 1234')
re.match('\S+', 'Hello 1234')
re.match(' +', 'Hello 1234')

re.findall('[0-9]+', '1 2 Fizz 4 Buzz Fizz 7 8')

######################################################
# 문자열 치환
# rs.sub('패턴', '바꿀문자열', '문자열', 바꿀횟수)
# 교체함수(매치객체)
# rs.sub('패턴', 교체함수, '문자열', 바꿀횟수)
######################################################
re.sub('apple|orange', 'fruit', 'apple box orange tree')


def multiple10(m):      # 매개변수로 매치 객체를 받음
    n = int(m.group())  # 매칭된 문자열을 가져와서 정수로 변환
    return str(n * 10)  # 숫자에 10을 곱한 뒤 문자열로 변환해서 반환


re.sub('[0-9]+', multiple10, '1 2 Fizz 4 Buzz Fizz 7 8')
re.sub('[0-9]+', lambda m: str(int(m.group()) * 10), '1 2 Fizz 4 Buzz Fizz 7 8')


re.sub('([a-z]+) ([0-9]+)', '\\2 \\1 \\2 \\1', 'hello 1234')
re.sub('({\s*)"(\w+)":\s*"(\w+)"(\s*})', '<\\2>\\3</\\2>', '{ "name": "james" }')
re.sub('({\s*)"(?P<key>\w+)":\s*"(?P<value>\w+)"(\s*})', '<\\g<key>>\\g<value></\\g<key>>', '{ "name": "james" }')
